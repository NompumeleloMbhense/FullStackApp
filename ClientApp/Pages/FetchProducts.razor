@page "/fetchproducts"
@using SharedApp.Models
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JS


<h3 class="mb-4">Product List</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}
else if (products != null && products.Length > 0)
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var product in products)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@product.Price</h6>

                        <p class="mb-1"><strong>Categories: </strong>
                            @if (product.Categories != null && product.Categories.Any())
                            {
                                <span>@string.Join(", ", product.Categories)</span>
                            }
                            else
                            {
                                <span class="text-muted">None</span>
                            }
                        </p>

                        <p class="mb-1">
                            <strong>Supplier: </strong>@product.Supplier?.Name
                            @if (!string.IsNullOrWhiteSpace(product.Supplier?.Location))
                            {
                                <span> - @product.Supplier.Location</span>
                            }
                        </p>
                        <span class="badge @(product.Available ? "bg-success" : "bg-danger")">
                            @(product.Available ? "Available" : "Out of stock")
                        </span>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No products available</p>
}



@code
{
    private Product[]? products;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            // timeout to avoid hanging requests
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            var response = await Http.GetAsync("/api/productlist", cts.Token);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync(cts.Token);

                try
                {
                    products = JsonSerializer.Deserialize<Product[]>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                    if (products == null)
                    {
                        errorMessage = "Received empty product data.";
                    }
                }
                catch (JsonException)
                {
                    errorMessage = "Error parsing product data. See console for details.";
                    await JS.InvokeVoidAsync("console.error", "Invalid JSON:", json);
                }
            }
            else
            {
                errorMessage = $"API returned error: {response.StatusCode}";
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request timed out.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
        }
        catch (NotSupportedException ex)
        {
            errorMessage = $"Unsupported content type: {ex.Message}";
        }
        catch (JsonException ex)
        {
            errorMessage = $"Error parsing product data: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}